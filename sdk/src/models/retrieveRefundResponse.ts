/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  lazy,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import {
  AmountsRefundRetrieval,
  amountsRefundRetrievalSchema,
} from './amountsRefundRetrieval.js';
import {
  PaymentMethodResponseSubsequent,
  paymentMethodResponseSubsequentSchema,
} from './paymentMethodResponseSubsequent.js';
import {
  RetrieveRefundResponseActions,
  retrieveRefundResponseActionsSchema,
} from './retrieveRefundResponseActions.js';

/** Response payload for referemced refimd retrieval requests. */
export interface RetrieveRefundResponse {
  /** Globally unique identifer defined by Worldpay. */
  paymentId: string;
  /** Globally unique identifer defined by Worldpay. */
  refundId: string;
  /**
   * State of this specific capture request; one of the following:
   *  refunded | partially refunded | refused | cancelled | voided | settled | settlement rejected
   */
  status: string;
  /** Unique reference generated by you that is used to identify a payment throughout its lifecycle. */
  reference?: string;
  /** Date and time, conforming to the ISO-8601 specification, that the transaction was received and processed. */
  dateTime: string;
  /** Response data specific to the payment method. */
  paymentMethod?: PaymentMethodResponseSubsequent;
  /** Total amounts including currency associated with this refund. */
  amounts: AmountsRefundRetrieval;
  actions?: RetrieveRefundResponseActions;
  additionalProperties?: Record<string, unknown>;
}

export const retrieveRefundResponseSchema: Schema<RetrieveRefundResponse> = typedExpandoObject(
  {
    paymentId: ['paymentId', string()],
    refundId: ['refundId', string()],
    status: ['status', string()],
    reference: ['reference', optional(string())],
    dateTime: ['dateTime', string()],
    paymentMethod: [
      'paymentMethod',
      optional(lazy(() => paymentMethodResponseSubsequentSchema)),
    ],
    amounts: ['amounts', lazy(() => amountsRefundRetrievalSchema)],
    actions: [
      '_actions',
      optional(lazy(() => retrieveRefundResponseActionsSchema)),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
