/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  lazy,
  number,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import {
  CardResponseIncrementalAuth,
  cardResponseIncrementalAuthSchema,
} from './cardResponseIncrementalAuth.js';
import {
  IncrementalAuthResponseActions,
  incrementalAuthResponseActionsSchema,
} from './incrementalAuthResponseActions.js';
import { Links, linksSchema } from './links.js';

/** Response payload for incremenetal authorization requests. */
export interface IncrementalAuthResponse {
  /** Unique reference generated by you that is used to identify a payment throughout its lifecycle. */
  reference?: string;
  /** Globally unique identifer defined by Worldpay. */
  paymentId?: string;
  /** Globally unique identifer defined by Worldpay. */
  commandId?: string;
  /** Globally unique identifer defined by Worldpay. */
  authorizationId?: string;
  /** Outcome of the request; one of the following: authorized | refused. */
  outcome: string;
  /** Date and time, conforming to the ISO-8601 specification, that the transaction was received and processed. */
  dateTime: string;
  /** Total of all authorizations on this payment. */
  totalAuthorized?: number;
  /** Summary of card-level information that was used in the incremental authorization. */
  paymentMethod?: CardResponseIncrementalAuth;
  /** HATEOAS links for response payloads. */
  links?: Links;
  actions?: IncrementalAuthResponseActions;
  additionalProperties?: Record<string, unknown>;
}

export const incrementalAuthResponseSchema: Schema<IncrementalAuthResponse> = typedExpandoObject(
  {
    reference: ['reference', optional(string())],
    paymentId: ['paymentId', optional(string())],
    commandId: ['commandId', optional(string())],
    authorizationId: ['authorizationId', optional(string())],
    outcome: ['outcome', string()],
    dateTime: ['dateTime', string()],
    totalAuthorized: ['totalAuthorized', optional(number())],
    paymentMethod: [
      'paymentMethod',
      optional(lazy(() => cardResponseIncrementalAuthSchema)),
    ],
    links: ['_links', optional(lazy(() => linksSchema))],
    actions: [
      '_actions',
      optional(lazy(() => incrementalAuthResponseActionsSchema)),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
