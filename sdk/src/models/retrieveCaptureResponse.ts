/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  lazy,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import {
  AmountsCaptureRetrieval,
  amountsCaptureRetrievalSchema,
} from './amountsCaptureRetrieval.js';
import {
  PaymentMethodResponseSubsequentOffline,
  paymentMethodResponseSubsequentOfflineSchema,
} from './paymentMethodResponseSubsequentOffline.js';
import {
  RetrieveCaptureResponseActions,
  retrieveCaptureResponseActionsSchema,
} from './retrieveCaptureResponseActions.js';

/** Response payload for capture retrieval requests. */
export interface RetrieveCaptureResponse {
  /** Globally unique identifer defined by Worldpay. */
  paymentId: string;
  /** Globally unique identifer defined by Worldpay. */
  captureId: string;
  /**
   * State of this specific capture request; one of the following:
   *  captured | partially captured | cancelled | voided | settled | settlement rejected
   */
  status: string;
  /** Unique reference generated by you that is used to identify a payment throughout its lifecycle. */
  reference?: string;
  /** Date and time, conforming to the ISO-8601 specification, that the transaction was received and processed. */
  dateTime: string;
  /** Response data specific to the payment method. */
  paymentMethod?: PaymentMethodResponseSubsequentOffline;
  /** Total amounts including currency associated with this capture. */
  amounts: AmountsCaptureRetrieval;
  actions?: RetrieveCaptureResponseActions;
  additionalProperties?: Record<string, unknown>;
}

export const retrieveCaptureResponseSchema: Schema<RetrieveCaptureResponse> = typedExpandoObject(
  {
    paymentId: ['paymentId', string()],
    captureId: ['captureId', string()],
    status: ['status', string()],
    reference: ['reference', optional(string())],
    dateTime: ['dateTime', string()],
    paymentMethod: [
      'paymentMethod',
      optional(lazy(() => paymentMethodResponseSubsequentOfflineSchema)),
    ],
    amounts: ['amounts', lazy(() => amountsCaptureRetrievalSchema)],
    actions: [
      '_actions',
      optional(lazy(() => retrieveCaptureResponseActionsSchema)),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
