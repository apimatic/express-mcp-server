/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { isMappedValueValidForSchema, oneOf, Schema } from '../../schema.js';
import {
  RetrievalEmvInstrumentClear,
  retrievalEmvInstrumentClearSchema,
} from '../retrievalEmvInstrumentClear.js';
import {
  RetrievalEmvInstrumentEncrypted,
  retrievalEmvInstrumentEncryptedSchema,
} from '../retrievalEmvInstrumentEncrypted.js';
import {
  RetrievalKeyedInstrumentClear,
  retrievalKeyedInstrumentClearSchema,
} from '../retrievalKeyedInstrumentClear.js';
import {
  RetrievalKeyedInstrumentEncrypted,
  retrievalKeyedInstrumentEncryptedSchema,
} from '../retrievalKeyedInstrumentEncrypted.js';
import {
  RetrievalOmnitokenInstrument,
  retrievalOmnitokenInstrumentSchema,
} from '../retrievalOmnitokenInstrument.js';
import {
  RetrievalPassTokenInstrument,
  retrievalPassTokenInstrumentSchema,
} from '../retrievalPassTokenInstrument.js';
import {
  RetrievalSoftPosInstrument,
  retrievalSoftPosInstrumentSchema,
} from '../retrievalSoftPosInstrument.js';
import {
  RetrievalSwipedInstrumentClear,
  retrievalSwipedInstrumentClearSchema,
} from '../retrievalSwipedInstrumentClear.js';
import {
  RetrievalSwipedInstrumentEncrypted,
  retrievalSwipedInstrumentEncryptedSchema,
} from '../retrievalSwipedInstrumentEncrypted.js';

/** This is a container type for one-of types. */
export type RetrievalCardInstruments =
  | RetrievalKeyedInstrumentClear
  | RetrievalKeyedInstrumentEncrypted
  | RetrievalSwipedInstrumentClear
  | RetrievalSwipedInstrumentEncrypted
  | RetrievalEmvInstrumentClear
  | RetrievalEmvInstrumentEncrypted
  | RetrievalSoftPosInstrument
  | RetrievalPassTokenInstrument
  | RetrievalOmnitokenInstrument;

const discriminatorMap = {
  'keyed/clear': retrievalKeyedInstrumentClearSchema,
  'keyed/encrypted': retrievalKeyedInstrumentEncryptedSchema,
  'swiped/clear': retrievalSwipedInstrumentClearSchema,
  'swiped/encrypted': retrievalSwipedInstrumentEncryptedSchema,
  'emv/clear': retrievalEmvInstrumentClearSchema,
  'emv/encrypted': retrievalEmvInstrumentEncryptedSchema,
  'softPos': retrievalSoftPosInstrumentSchema,
  'token/pass': retrievalPassTokenInstrumentSchema,
  'token/omni': retrievalOmnitokenInstrumentSchema,
};

export const retrievalCardInstrumentsSchema: Schema<RetrievalCardInstruments> = oneOf(
  [
    retrievalKeyedInstrumentClearSchema,
    retrievalKeyedInstrumentEncryptedSchema,
    retrievalSwipedInstrumentClearSchema,
    retrievalSwipedInstrumentEncryptedSchema,
    retrievalEmvInstrumentClearSchema,
    retrievalEmvInstrumentEncryptedSchema,
    retrievalSoftPosInstrumentSchema,
    retrievalPassTokenInstrumentSchema,
    retrievalOmnitokenInstrumentSchema,
  ],
  discriminatorMap,
  'type'
);

export namespace RetrievalCardInstruments {
  /**
   * Validation method to narrow down union type to RetrievalKeyedInstrumentClear type case.
   *
   * This is Retrieval Keyed instrument - Clear case.
   */
  export function isRetrievalKeyedInstrumentClear(
    value: unknown
  ): value is RetrievalKeyedInstrumentClear {
    return isMappedValueValidForSchema(
      value,
      retrievalKeyedInstrumentClearSchema
    );
  }

  /**
   * Validation method to narrow down union type to RetrievalKeyedInstrumentEncrypted type case.
   *
   * This is Retrieval Keyed instrument - Encrypted case.
   */
  export function isRetrievalKeyedInstrumentEncrypted(
    value: unknown
  ): value is RetrievalKeyedInstrumentEncrypted {
    return isMappedValueValidForSchema(
      value,
      retrievalKeyedInstrumentEncryptedSchema
    );
  }

  /**
   * Validation method to narrow down union type to RetrievalSwipedInstrumentClear type case.
   *
   * This is Retrieval Swiped instrument - Clear case.
   */
  export function isRetrievalSwipedInstrumentClear(
    value: unknown
  ): value is RetrievalSwipedInstrumentClear {
    return isMappedValueValidForSchema(
      value,
      retrievalSwipedInstrumentClearSchema
    );
  }

  /**
   * Validation method to narrow down union type to RetrievalSwipedInstrumentEncrypted type case.
   *
   * This is Retrieval Swiped instrument - Encrypted case.
   */
  export function isRetrievalSwipedInstrumentEncrypted(
    value: unknown
  ): value is RetrievalSwipedInstrumentEncrypted {
    return isMappedValueValidForSchema(
      value,
      retrievalSwipedInstrumentEncryptedSchema
    );
  }

  /**
   * Validation method to narrow down union type to RetrievalEmvInstrumentClear type case.
   *
   * This is Retrieval EMV instrument - Clear case.
   */
  export function isRetrievalEmvInstrumentClear(
    value: unknown
  ): value is RetrievalEmvInstrumentClear {
    return isMappedValueValidForSchema(
      value,
      retrievalEmvInstrumentClearSchema
    );
  }

  /**
   * Validation method to narrow down union type to RetrievalEmvInstrumentEncrypted type case.
   *
   * This is Retrieval EMV instrument - Encrypted case.
   */
  export function isRetrievalEmvInstrumentEncrypted(
    value: unknown
  ): value is RetrievalEmvInstrumentEncrypted {
    return isMappedValueValidForSchema(
      value,
      retrievalEmvInstrumentEncryptedSchema
    );
  }

  /**
   * Validation method to narrow down union type to RetrievalSoftPosInstrument type case.
   *
   * This is Retrieval SoftPOS instrument case.
   */
  export function isRetrievalSoftPosInstrument(
    value: unknown
  ): value is RetrievalSoftPosInstrument {
    return isMappedValueValidForSchema(value, retrievalSoftPosInstrumentSchema);
  }

  /**
   * Validation method to narrow down union type to RetrievalPassTokenInstrument type case.
   *
   * This is Retrieval PASS token instrument case.
   */
  export function isRetrievalPassTokenInstrument(
    value: unknown
  ): value is RetrievalPassTokenInstrument {
    return isMappedValueValidForSchema(
      value,
      retrievalPassTokenInstrumentSchema
    );
  }

  /**
   * Validation method to narrow down union type to RetrievalOmnitokenInstrument type case.
   *
   * This is Retrieval Omnitoken instrument case.
   */
  export function isRetrievalOmnitokenInstrument(
    value: unknown
  ): value is RetrievalOmnitokenInstrument {
    return isMappedValueValidForSchema(
      value,
      retrievalOmnitokenInstrumentSchema
    );
  }
}
