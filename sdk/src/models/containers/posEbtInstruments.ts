/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { isMappedValueValidForSchema, oneOf, Schema } from '../../schema.js';
import { PosKeyedClear, posKeyedClearSchema } from '../posKeyedClear.js';
import {
  PosKeyedEncrypted,
  posKeyedEncryptedSchema,
} from '../posKeyedEncrypted.js';
import {
  SwipedClearInstrument,
  swipedClearInstrumentSchema,
} from '../swipedClearInstrument.js';
import {
  SwipedEncryptedInstrument,
  swipedEncryptedInstrumentSchema,
} from '../swipedEncryptedInstrument.js';

/** This is a container type for one-of types. */
export type PosEbtInstruments =
  | PosKeyedClear
  | PosKeyedEncrypted
  | SwipedClearInstrument
  | SwipedEncryptedInstrument;

const discriminatorMap = {
  'keyed/clear': posKeyedClearSchema,
  'keyed/encrypted': posKeyedEncryptedSchema,
  'swiped/clear': swipedClearInstrumentSchema,
  'swiped/encrypted': swipedEncryptedInstrumentSchema,
};

export const posEbtInstrumentsSchema: Schema<PosEbtInstruments> = oneOf(
  [
    posKeyedClearSchema,
    posKeyedEncryptedSchema,
    swipedClearInstrumentSchema,
    swipedEncryptedInstrumentSchema,
  ],
  discriminatorMap,
  'type'
);

export namespace PosEbtInstruments {
  /**
   * Validation method to narrow down union type to PosKeyedClear type case.
   *
   * This is POS Keyed (Clear) case.
   */
  export function isPosKeyedClear(value: unknown): value is PosKeyedClear {
    return isMappedValueValidForSchema(value, posKeyedClearSchema);
  }

  /**
   * Validation method to narrow down union type to PosKeyedEncrypted type case.
   *
   * This is POS Keyed (Encrypted) case.
   */
  export function isPosKeyedEncrypted(
    value: unknown
  ): value is PosKeyedEncrypted {
    return isMappedValueValidForSchema(value, posKeyedEncryptedSchema);
  }

  /**
   * Validation method to narrow down union type to SwipedClearInstrument type case.
   *
   * This is Swiped Clear Instrument case.
   */
  export function isSwipedClearInstrument(
    value: unknown
  ): value is SwipedClearInstrument {
    return isMappedValueValidForSchema(value, swipedClearInstrumentSchema);
  }

  /**
   * Validation method to narrow down union type to SwipedEncryptedInstrument type case.
   *
   * This is Swiped Encrypted Instrument case.
   */
  export function isSwipedEncryptedInstrument(
    value: unknown
  ): value is SwipedEncryptedInstrument {
    return isMappedValueValidForSchema(value, swipedEncryptedInstrumentSchema);
  }
}
