/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { isMappedValueValidForSchema, oneOf, Schema } from '../../schema.js';
import {
  EmvInstrumentClear,
  emvInstrumentClearSchema,
} from '../emvInstrumentClear.js';
import {
  EmvInstrumentEncrypted,
  emvInstrumentEncryptedSchema,
} from '../emvInstrumentEncrypted.js';
import { PassToken, passTokenSchema } from '../passToken.js';
import { PosKeyedClear, posKeyedClearSchema } from '../posKeyedClear.js';
import {
  PosKeyedEncrypted,
  posKeyedEncryptedSchema,
} from '../posKeyedEncrypted.js';
import {
  SoftPosInstrument,
  softPosInstrumentSchema,
} from '../softPosInstrument.js';
import {
  SwipedClearInstrument,
  swipedClearInstrumentSchema,
} from '../swipedClearInstrument.js';
import {
  SwipedEncryptedInstrument,
  swipedEncryptedInstrumentSchema,
} from '../swipedEncryptedInstrument.js';
import {
  WorldpayOmniToken,
  worldpayOmniTokenSchema,
} from '../worldpayOmniToken.js';

/** This is a container type for one-of types. */
export type PosCardInstruments =
  | PosKeyedClear
  | PosKeyedEncrypted
  | SwipedClearInstrument
  | SwipedEncryptedInstrument
  | EmvInstrumentClear
  | EmvInstrumentEncrypted
  | SoftPosInstrument
  | PassToken
  | WorldpayOmniToken;

const discriminatorMap = {
  'keyed/clear': posKeyedClearSchema,
  'keyed/encrypted': posKeyedEncryptedSchema,
  'swiped/clear': swipedClearInstrumentSchema,
  'swiped/encrypted': swipedEncryptedInstrumentSchema,
  'emv/clear': emvInstrumentClearSchema,
  'emv/encrypted': emvInstrumentEncryptedSchema,
  'softPos': softPosInstrumentSchema,
  'token/pass': passTokenSchema,
  'token/omni': worldpayOmniTokenSchema,
};

export const posCardInstrumentsSchema: Schema<PosCardInstruments> = oneOf(
  [
    posKeyedClearSchema,
    posKeyedEncryptedSchema,
    swipedClearInstrumentSchema,
    swipedEncryptedInstrumentSchema,
    emvInstrumentClearSchema,
    emvInstrumentEncryptedSchema,
    softPosInstrumentSchema,
    passTokenSchema,
    worldpayOmniTokenSchema,
  ],
  discriminatorMap,
  'type'
);

export namespace PosCardInstruments {
  /**
   * Validation method to narrow down union type to PosKeyedClear type case.
   *
   * This is POS Keyed (Clear) case.
   */
  export function isPosKeyedClear(value: unknown): value is PosKeyedClear {
    return isMappedValueValidForSchema(value, posKeyedClearSchema);
  }

  /**
   * Validation method to narrow down union type to PosKeyedEncrypted type case.
   *
   * This is POS Keyed (Encrypted) case.
   */
  export function isPosKeyedEncrypted(
    value: unknown
  ): value is PosKeyedEncrypted {
    return isMappedValueValidForSchema(value, posKeyedEncryptedSchema);
  }

  /**
   * Validation method to narrow down union type to SwipedClearInstrument type case.
   *
   * This is Swiped Clear Instrument case.
   */
  export function isSwipedClearInstrument(
    value: unknown
  ): value is SwipedClearInstrument {
    return isMappedValueValidForSchema(value, swipedClearInstrumentSchema);
  }

  /**
   * Validation method to narrow down union type to SwipedEncryptedInstrument type case.
   *
   * This is Swiped Encrypted Instrument case.
   */
  export function isSwipedEncryptedInstrument(
    value: unknown
  ): value is SwipedEncryptedInstrument {
    return isMappedValueValidForSchema(value, swipedEncryptedInstrumentSchema);
  }

  /**
   * Validation method to narrow down union type to EmvInstrumentClear type case.
   *
   * This is EMV Instrument (Clear) case.
   */
  export function isEmvInstrumentClear(
    value: unknown
  ): value is EmvInstrumentClear {
    return isMappedValueValidForSchema(value, emvInstrumentClearSchema);
  }

  /**
   * Validation method to narrow down union type to EmvInstrumentEncrypted type case.
   *
   * This is EMV Instrument (Encrypted) case.
   */
  export function isEmvInstrumentEncrypted(
    value: unknown
  ): value is EmvInstrumentEncrypted {
    return isMappedValueValidForSchema(value, emvInstrumentEncryptedSchema);
  }

  /**
   * Validation method to narrow down union type to SoftPosInstrument type case.
   *
   * This is SoftPOS Instrument case.
   */
  export function isSoftPosInstrument(
    value: unknown
  ): value is SoftPosInstrument {
    return isMappedValueValidForSchema(value, softPosInstrumentSchema);
  }

  /**
   * Validation method to narrow down union type to PassToken type case.
   *
   * This is PASS Token case.
   */
  export function isPassToken(value: unknown): value is PassToken {
    return isMappedValueValidForSchema(value, passTokenSchema);
  }

  /**
   * Validation method to narrow down union type to WorldpayOmniToken type case.
   *
   * This is Worldpay OmniToken case.
   */
  export function isWorldpayOmniToken(
    value: unknown
  ): value is WorldpayOmniToken {
    return isMappedValueValidForSchema(value, worldpayOmniTokenSchema);
  }
}
