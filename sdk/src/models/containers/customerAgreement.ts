/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { isMappedValueValidForSchema, oneOf, Schema } from '../../schema.js';
import { CardOnFile, cardOnFileSchema } from '../cardOnFile.js';
import { Installment, installmentSchema } from '../installment.js';
import { Scheduled, scheduledSchema } from '../scheduled.js';
import { Subscription, subscriptionSchema } from '../subscription.js';
import { Unscheduled, unscheduledSchema } from '../unscheduled.js';

/** This is a container type for one-of types. */
export type CustomerAgreement =
  | CardOnFile
  | Subscription
  | Unscheduled
  | Installment
  | Scheduled;

const discriminatorMap = {
  'cardOnFile': cardOnFileSchema,
  'subscription': subscriptionSchema,
  'unscheduled': unscheduledSchema,
  'installment': installmentSchema,
  'scheduled': scheduledSchema,
};

export const customerAgreementSchema: Schema<CustomerAgreement> = oneOf(
  [
    cardOnFileSchema,
    subscriptionSchema,
    unscheduledSchema,
    installmentSchema,
    scheduledSchema,
  ],
  discriminatorMap,
  'type'
);

export namespace CustomerAgreement {
  /**
   * Validation method to narrow down union type to CardOnFile type case.
   *
   * This is cardOnFile case.
   */
  export function isCardOnFile(value: unknown): value is CardOnFile {
    return isMappedValueValidForSchema(value, cardOnFileSchema);
  }

  /**
   * Validation method to narrow down union type to Subscription type case.
   *
   * This is subscription case.
   */
  export function isSubscription(value: unknown): value is Subscription {
    return isMappedValueValidForSchema(value, subscriptionSchema);
  }

  /**
   * Validation method to narrow down union type to Unscheduled type case.
   *
   * This is unscheduled case.
   */
  export function isUnscheduled(value: unknown): value is Unscheduled {
    return isMappedValueValidForSchema(value, unscheduledSchema);
  }

  /**
   * Validation method to narrow down union type to Installment type case.
   *
   * This is Installment case.
   */
  export function isInstallment(value: unknown): value is Installment {
    return isMappedValueValidForSchema(value, installmentSchema);
  }

  /**
   * Validation method to narrow down union type to Scheduled type case.
   *
   * This is scheduled case.
   */
  export function isScheduled(value: unknown): value is Scheduled {
    return isMappedValueValidForSchema(value, scheduledSchema);
  }
}
