/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { isMappedValueValidForSchema, oneOf, Schema } from '../../schema.js';
import {
  EncryptedKeyedInstrument,
  encryptedKeyedInstrumentSchema,
} from '../encryptedKeyedInstrument.js';
import {
  PlainGiftCardDataInstrumentClear,
  plainGiftCardDataInstrumentClearSchema,
} from '../plainGiftCardDataInstrumentClear.js';
import {
  SwipedClearPinlessInstrument,
  swipedClearPinlessInstrumentSchema,
} from '../swipedClearPinlessInstrument.js';
import {
  SwipedEncryptedPinlessInstrument,
  swipedEncryptedPinlessInstrumentSchema,
} from '../swipedEncryptedPinlessInstrument.js';

/** This is a container type for one-of types. */
export type PosGiftInstruments =
  | PlainGiftCardDataInstrumentClear
  | EncryptedKeyedInstrument
  | SwipedClearPinlessInstrument
  | SwipedEncryptedPinlessInstrument;

const discriminatorMap = {
  'keyed/clear': plainGiftCardDataInstrumentClearSchema,
  'keyed/encrypted': encryptedKeyedInstrumentSchema,
  'swiped/clear': swipedClearPinlessInstrumentSchema,
  'swiped/encrypted': swipedEncryptedPinlessInstrumentSchema,
};

export const posGiftInstrumentsSchema: Schema<PosGiftInstruments> = oneOf(
  [
    plainGiftCardDataInstrumentClearSchema,
    encryptedKeyedInstrumentSchema,
    swipedClearPinlessInstrumentSchema,
    swipedEncryptedPinlessInstrumentSchema,
  ],
  discriminatorMap,
  'type'
);

export namespace PosGiftInstruments {
  /**
   * Validation method to narrow down union type to PlainGiftCardDataInstrumentClear type case.
   *
   * This is Plain Gift Card Data Instrument (Clear) case.
   */
  export function isPlainGiftCardDataInstrumentClear(
    value: unknown
  ): value is PlainGiftCardDataInstrumentClear {
    return isMappedValueValidForSchema(
      value,
      plainGiftCardDataInstrumentClearSchema
    );
  }

  /**
   * Validation method to narrow down union type to EncryptedKeyedInstrument type case.
   *
   * This is Encrypted Keyed Instrument case.
   */
  export function isEncryptedKeyedInstrument(
    value: unknown
  ): value is EncryptedKeyedInstrument {
    return isMappedValueValidForSchema(value, encryptedKeyedInstrumentSchema);
  }

  /**
   * Validation method to narrow down union type to SwipedClearPinlessInstrument type case.
   *
   * This is Swiped Clear Pinless Instrument case.
   */
  export function isSwipedClearPinlessInstrument(
    value: unknown
  ): value is SwipedClearPinlessInstrument {
    return isMappedValueValidForSchema(
      value,
      swipedClearPinlessInstrumentSchema
    );
  }

  /**
   * Validation method to narrow down union type to SwipedEncryptedPinlessInstrument type case.
   *
   * This is Swiped Encrypted Pinless Instrument case.
   */
  export function isSwipedEncryptedPinlessInstrument(
    value: unknown
  ): value is SwipedEncryptedPinlessInstrument {
    return isMappedValueValidForSchema(
      value,
      swipedEncryptedPinlessInstrumentSchema
    );
  }
}
