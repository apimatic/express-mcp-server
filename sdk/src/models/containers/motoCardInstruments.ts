/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { isMappedValueValidForSchema, oneOf, Schema } from '../../schema.js';
import {
  EncryptedKeyedInstrument,
  encryptedKeyedInstrumentSchema,
} from '../encryptedKeyedInstrument.js';
import {
  KeyedClearInstrument,
  keyedClearInstrumentSchema,
} from '../keyedClearInstrument.js';
import { PassToken, passTokenSchema } from '../passToken.js';
import {
  WorldpayOmniToken,
  worldpayOmniTokenSchema,
} from '../worldpayOmniToken.js';

/** This is a container type for one-of types. */
export type MotoCardInstruments =
  | KeyedClearInstrument
  | EncryptedKeyedInstrument
  | WorldpayOmniToken
  | PassToken;

const discriminatorMap = {
  'keyed/clear': keyedClearInstrumentSchema,
  'keyed/encrypted': encryptedKeyedInstrumentSchema,
  'token/omni': worldpayOmniTokenSchema,
  'token/pass': passTokenSchema,
};

export const motoCardInstrumentsSchema: Schema<MotoCardInstruments> = oneOf(
  [
    keyedClearInstrumentSchema,
    encryptedKeyedInstrumentSchema,
    worldpayOmniTokenSchema,
    passTokenSchema,
  ],
  discriminatorMap,
  'type'
);

export namespace MotoCardInstruments {
  /**
   * Validation method to narrow down union type to KeyedClearInstrument type case.
   *
   * This is Keyed Clear Instrument case.
   */
  export function isKeyedClearInstrument(
    value: unknown
  ): value is KeyedClearInstrument {
    return isMappedValueValidForSchema(value, keyedClearInstrumentSchema);
  }

  /**
   * Validation method to narrow down union type to EncryptedKeyedInstrument type case.
   *
   * This is Encrypted Keyed Instrument case.
   */
  export function isEncryptedKeyedInstrument(
    value: unknown
  ): value is EncryptedKeyedInstrument {
    return isMappedValueValidForSchema(value, encryptedKeyedInstrumentSchema);
  }

  /**
   * Validation method to narrow down union type to WorldpayOmniToken type case.
   *
   * This is Worldpay OmniToken case.
   */
  export function isWorldpayOmniToken(
    value: unknown
  ): value is WorldpayOmniToken {
    return isMappedValueValidForSchema(value, worldpayOmniTokenSchema);
  }

  /**
   * Validation method to narrow down union type to PassToken type case.
   *
   * This is PASS Token case.
   */
  export function isPassToken(value: unknown): value is PassToken {
    return isMappedValueValidForSchema(value, passTokenSchema);
  }
}
