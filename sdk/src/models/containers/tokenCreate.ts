/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { isMappedValueValidForSchema, oneOf, Schema } from '../../schema.js';
import {
  ExpressPassToken,
  expressPassTokenSchema,
} from '../expressPassToken.js';
import { Network, networkSchema } from '../network.js';
import { Omnitoken, omnitokenSchema } from '../omnitoken.js';
import { Worldpay, worldpaySchema } from '../worldpay.js';

/** This is a container type for one-of types. */
export type TokenCreate = Worldpay | Network | ExpressPassToken | Omnitoken;

const discriminatorMap = {
  'worldpay': worldpaySchema,
  'network': networkSchema,
  'pass': expressPassTokenSchema,
  'omni': omnitokenSchema,
};

export const tokenCreateSchema: Schema<TokenCreate> = oneOf(
  [worldpaySchema, networkSchema, expressPassTokenSchema, omnitokenSchema],
  discriminatorMap,
  'type'
);

export namespace TokenCreate {
  /**
   * Validation method to narrow down union type to Worldpay type case.
   *
   * This is worldpay case.
   */
  export function isWorldpay(value: unknown): value is Worldpay {
    return isMappedValueValidForSchema(value, worldpaySchema);
  }

  /**
   * Validation method to narrow down union type to Network type case.
   *
   * This is network case.
   */
  export function isNetwork(value: unknown): value is Network {
    return isMappedValueValidForSchema(value, networkSchema);
  }

  /**
   * Validation method to narrow down union type to ExpressPassToken type case.
   *
   * This is Express PASS token case.
   */
  export function isExpressPassToken(
    value: unknown
  ): value is ExpressPassToken {
    return isMappedValueValidForSchema(value, expressPassTokenSchema);
  }

  /**
   * Validation method to narrow down union type to Omnitoken type case.
   *
   * This is Omnitoken case.
   */
  export function isOmnitoken(value: unknown): value is Omnitoken {
    return isMappedValueValidForSchema(value, omnitokenSchema);
  }
}
