/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  lazy,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { Expiration, expirationSchema } from './expiration.js';
import { FraudResult, fraudResultSchema } from './fraudResult.js';
import {
  NetworkResponseIncrementalAuthorizationResponse,
  networkResponseIncrementalAuthorizationResponseSchema,
} from './networkResponseIncrementalAuthorizationResponse.js';
import { Type, typeSchema } from './type.js';

/** Summary of card-level information that was used in the incremental authorization. */
export interface CardResponseIncrementalAuth {
  /** Type of payment method. */
  type?: Type;
  /** BIN (Bank Identification Number) for the card. */
  bin?: string;
  /** Last four digits of the card. */
  lastFour?: string;
  /** Card logo/brand of the card. */
  brand?: string;
  /** Issuer/bank of the card (if known). */
  issuer?: string;
  /** Issuer payment account reference. */
  paymentAccountReference?: string;
  /** Information about the expiration date. */
  expiration?: Expiration;
  /** Unaltered response data from the downstream acquirer or issuer. */
  networkResponse?: NetworkResponseIncrementalAuthorizationResponse;
  /** Results of an optional Fraud Check. */
  fraudResult?: FraudResult;
  additionalProperties?: Record<string, unknown>;
}

export const cardResponseIncrementalAuthSchema: Schema<CardResponseIncrementalAuth> = typedExpandoObject(
  {
    type: ['type', optional(typeSchema)],
    bin: ['bin', optional(string())],
    lastFour: ['lastFour', optional(string())],
    brand: ['brand', optional(string())],
    issuer: ['issuer', optional(string())],
    paymentAccountReference: ['paymentAccountReference', optional(string())],
    expiration: ['expiration', optional(lazy(() => expirationSchema))],
    networkResponse: [
      'networkResponse',
      optional(
        lazy(() => networkResponseIncrementalAuthorizationResponseSchema)
      ),
    ],
    fraudResult: ['fraudResult', optional(lazy(() => fraudResultSchema))],
  },
  'additionalProperties',
  optional(unknown())
);
