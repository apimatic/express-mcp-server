/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { bigint, number, object, optional, Schema, string } from '../schema.js';
import { ProductType, productTypeSchema } from './productType.js';
import { UnitOfMeasure, unitOfMeasureSchema } from './unitOfMeasure.js';

/** This object contains Product data for the Fleet transaction. */
export interface FleetProduct {
  /**
   * The type of product purchased
   * <br>
   *   **Possible Values:**
   *   | Value | Description |
   *   | ----- | ------------|
   *   | F | Fuel |
   *   | N | Non-Fuel |
   */
  productType?: ProductType;
  /** NACS Product Code */
  productCode?: string;
  /** Quantity Purchased. */
  quantity?: number;
  /** Amount value in minor currency units with no decimal point. For example, $1.00 would be written as 100. */
  unitPrice?: bigint;
  /**
   * Unit of Measure
   * <br>
   *   **Possible Values:**
   *   | Value | Description |
   *   | ----- | ------------|
   *   | C | Case or Carton |
   *   | G | Gallons |
   *   | K | Kilograms |
   *   | L | Liters |
   *   | O | Other |
   *   | P | Pounds |
   *   | Q | Quarts |
   *   | U | Units |
   *   | Z | Ounces |
   */
  unitOfMeasure?: UnitOfMeasure;
  /** Amount value in minor currency units with no decimal point. For example, $1.00 would be written as 100. */
  productAmount?: bigint;
}

export const fleetProductSchema: Schema<FleetProduct> = object({
  productType: ['productType', optional(productTypeSchema)],
  productCode: ['productCode', optional(string())],
  quantity: ['quantity', optional(number())],
  unitPrice: ['unitPrice', optional(bigint())],
  unitOfMeasure: ['unitOfMeasure', optional(unitOfMeasureSchema)],
  productAmount: ['productAmount', optional(bigint())],
});
