/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  boolean,
  lazy,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { AccountHistory, accountHistorySchema } from './accountHistory.js';
import { Challenge, challengeSchema } from './challenge.js';
import { DeviceData, deviceDataSchema } from './deviceData.js';
import {
  GiftCardsPurchase,
  giftCardsPurchaseSchema,
} from './giftCardsPurchase.js';
import { Mode, modeSchema } from './mode.js';
import { ScaExemption, scaExemptionSchema } from './scaExemption.js';
import { Shipping3Ds, shipping3DsSchema } from './shipping3Ds.js';
import {
  TransactionHistory,
  transactionHistorySchema,
} from './transactionHistory.js';
import { Usertype, usertypeSchema } from './usertype.js';

/** 3DS authentication as part of the payments API flow */
export interface Integrated {
  type: string;
  /**
   * When to request 3DS authentication. Always, when SCA is mandated or only for soft declines.
   *   |  |  |
   *   |-----|-----|
   *   | always   | Attempt 3DS for every request |
   *   | scaMandatedOnly   |  Only attempt 3DS for issuer countries in the EEA where SCA applies   |
   *   | softDeclinesOnly   | Attempt 3DS following a soft decline from payment authorization  |
   *   | customRules   | Attempt 3DS based on rules configured |
   */
  mode?: Mode;
  /** request an SCA exemption from Worldpay. Be SCA compliant and reduce customer checkout friction */
  scaExemption?: ScaExemption;
  /** An object containing 3DS challenge preferences and configuration */
  challenge: Challenge;
  /** An object containing device data for 3DS */
  deviceData: DeviceData;
  shipping?: Shipping3Ds;
  /** Has the account been flagged for suspicious activity. */
  previousSuspiciousActivity?: boolean;
  usertype?: Usertype;
  /** Customer account history */
  accountHistory?: AccountHistory;
  /** Repeat of a previous order */
  reorder?: boolean;
  /** Expected date that a pre-ordered purchase will be available. */
  preOrderDate?: string;
  /** Object containing details of the last transaction. */
  transactionHistory?: TransactionHistory;
  /** If the order is being used to purchase a gift card. */
  giftCardsPurchase?: GiftCardsPurchase;
  additionalProperties?: Record<string, unknown>;
}

export const integratedSchema: Schema<Integrated> = typedExpandoObject(
  {
    type: ['type', string()],
    mode: ['mode', optional(modeSchema)],
    scaExemption: ['scaExemption', optional(lazy(() => scaExemptionSchema))],
    challenge: ['challenge', lazy(() => challengeSchema)],
    deviceData: ['deviceData', lazy(() => deviceDataSchema)],
    shipping: ['shipping', optional(lazy(() => shipping3DsSchema))],
    previousSuspiciousActivity: [
      'previousSuspiciousActivity',
      optional(boolean()),
    ],
    usertype: ['usertype', optional(usertypeSchema)],
    accountHistory: [
      'accountHistory',
      optional(lazy(() => accountHistorySchema)),
    ],
    reorder: ['reorder', optional(boolean())],
    preOrderDate: ['preOrderDate', optional(string())],
    transactionHistory: [
      'transactionHistory',
      optional(lazy(() => transactionHistorySchema)),
    ],
    giftCardsPurchase: [
      'giftCardsPurchase',
      optional(lazy(() => giftCardsPurchaseSchema)),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
