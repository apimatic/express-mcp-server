/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  lazy,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { BatchResponse, batchResponseSchema } from './batchResponse.js';
import { Expiration, expirationSchema } from './expiration.js';
import {
  NetworkResponseReferencedFollowOn,
  networkResponseReferencedFollowOnSchema,
} from './networkResponseReferencedFollowOn.js';

/**
 * Summary of card-level information that was used in the original authorization and referenced cancellation request, whether submitted explicitly or
 * represented by a wallet, token, or encrypted payload.
 */
export interface CardResponseSubsequent {
  /** Value indicating the specific type instance for this field. */
  type: string;
  /** BIN (Bank Identification Number) for the card. */
  bin?: string;
  /** Last four digits of the card. */
  lastFour?: string;
  /** Card logo/brand of the card. */
  brand?: string;
  /** Issuer/bank of the card (if known). */
  issuer?: string;
  /** Information about the expiration date. */
  expiration?: Expiration;
  /** Summary of the open batch, as of the completion of the current operation. */
  batch?: BatchResponse;
  /** Unaltered response data from the downstream acquirer or issuer. */
  networkResponse?: NetworkResponseReferencedFollowOn;
  additionalProperties?: Record<string, unknown>;
}

export const cardResponseSubsequentSchema: Schema<CardResponseSubsequent> = typedExpandoObject(
  {
    type: ['type', string()],
    bin: ['bin', optional(string())],
    lastFour: ['lastFour', optional(string())],
    brand: ['brand', optional(string())],
    issuer: ['issuer', optional(string())],
    expiration: ['expiration', optional(lazy(() => expirationSchema))],
    batch: ['batch', optional(lazy(() => batchResponseSchema))],
    networkResponse: [
      'networkResponse',
      optional(lazy(() => networkResponseReferencedFollowOnSchema)),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
