/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import {
  GetClientPcrtRequest,
  getClientPcrtRequestSchema,
} from '../models/getClientPcrtRequest.js';
import {
  GetClientPcrtResponse,
  getClientPcrtResponseSchema,
} from '../models/getClientPcrtResponse.js';
import { number, optional } from '../schema.js';
import { BaseApi } from './baseApi.js';
import { ProblemDetails400Error } from '../errors/problemDetails400Error.js';
import { ProblemDetails401Error } from '../errors/problemDetails401Error.js';
import { ProblemDetails500Error } from '../errors/problemDetails500Error.js';

export class ClientManagementApi extends BaseApi {
  /**
   * Returns a SoftPOS proximity reader token with relevant entitlements.
   *
   *
   * @param wpApiVersion   Major version of the Payments API. This value is used for
   *                                                      routing purposes.
   * @param body           Request object for retrieving a payment card reader token.
   * @param wpAccountId    Identifier for the partner, PayFac or merchant chain account.
   *                                                      This numeric value is for Express integrators only.
   * @return Response from the API call
   */
  async getPcrt(
    wpApiVersion: number,
    body: GetClientPcrtRequest,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GetClientPcrtResponse>> {
    const req = this.createRequest('POST', '/clients/entitlements/softpos');
    const mapped = req.prepareArgs({
      wpApiVersion: [wpApiVersion, number()],
      body: [body, getClientPcrtRequestSchema],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('Content-Type', 'application/json');
    req.header('WP-AccountId', mapped.wpAccountId);
    req.json(mapped.body);
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(getClientPcrtResponseSchema, requestOptions);
  }
}
