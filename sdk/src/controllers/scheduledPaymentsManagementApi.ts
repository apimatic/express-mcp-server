/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import {
  QueryPaymentScheduleResponse,
  queryPaymentScheduleResponseSchema,
} from '../models/queryPaymentScheduleResponse.js';
import {
  UpdatePaymentScheduleRequest,
  updatePaymentScheduleRequestSchema,
} from '../models/updatePaymentScheduleRequest.js';
import {
  UpdatePaymentScheduleResponse,
  updatePaymentScheduleResponseSchema,
} from '../models/updatePaymentScheduleResponse.js';
import { number, optional, string } from '../schema.js';
import { BaseApi } from './baseApi.js';
import { ProblemDetails400Error } from '../errors/problemDetails400Error.js';
import { ProblemDetails401Error } from '../errors/problemDetails401Error.js';
import { ProblemDetails404Error } from '../errors/problemDetails404Error.js';
import { ProblemDetails500Error } from '../errors/problemDetails500Error.js';

export class ScheduledPaymentsManagementApi extends BaseApi {
  /**
   * Query for information on a specific payment schedule.
   *
   * @param wpApiVersion   Major version of the Payments API. This value is used for routing purposes.
   * @param scheduleId     Identifier for the schedule.
   * @param merchantId     Identifier for the merchant associated with this resource.
   * @param wpAccountId    Identifier for the partner, PayFac or merchant chain account. This numeric value
   *                                 is for Express integrators only.
   * @return Response from the API call
   */
  async querySchedule(
    wpApiVersion: number,
    scheduleId: string,
    merchantId: string,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<QueryPaymentScheduleResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      wpApiVersion: [wpApiVersion, number()],
      scheduleId: [scheduleId, string()],
      merchantId: [merchantId, string()],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('WP-AccountId', mapped.wpAccountId);
    req.query('merchantId', mapped.merchantId);
    req.appendTemplatePath`/payments/schedules/${mapped.scheduleId}`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(queryPaymentScheduleResponseSchema, requestOptions);
  }

  /**
   * Update an existing recurring payment schedule with new values.
   *
   * @param wpApiVersion   Major version of the Payments API. This value is
   *                                                              used for routing purposes.
   * @param scheduleId     Identifier for the schedule.
   * @param body           Request object for updating a recurring payment
   *                                                              schedule.
   * @param wpAccountId    Identifier for the partner, PayFac or merchant chain
   *                                                              account. This numeric value is for Express
   *                                                              integrators only.
   * @return Response from the API call
   */
  async updateSchedule(
    wpApiVersion: number,
    scheduleId: string,
    body: UpdatePaymentScheduleRequest,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UpdatePaymentScheduleResponse>> {
    const req = this.createRequest('PATCH');
    const mapped = req.prepareArgs({
      wpApiVersion: [wpApiVersion, number()],
      scheduleId: [scheduleId, string()],
      body: [body, updatePaymentScheduleRequestSchema],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('Content-Type', 'application/json');
    req.header('WP-AccountId', mapped.wpAccountId);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/schedules/${mapped.scheduleId}`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(updatePaymentScheduleResponseSchema, requestOptions);
  }

  /**
   * Delete an existing recurring payment schedule with new values.
   *
   * @param wpApiVersion   Major version of the Payments API. This value is used for routing purposes.
   * @param scheduleId     Identifier for the schedule.
   * @param merchantId     Identifier for the merchant associated with this resource.
   * @param wpAccountId    Identifier for the partner, PayFac or merchant chain account. This numeric value
   *                                 is for Express integrators only.
   * @return Response from the API call
   */
  async deleteSchedule(
    wpApiVersion: number,
    scheduleId: string,
    merchantId: string,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      wpApiVersion: [wpApiVersion, number()],
      scheduleId: [scheduleId, string()],
      merchantId: [merchantId, string()],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('WP-AccountId', mapped.wpAccountId);
    req.query('merchantId', mapped.merchantId);
    req.appendTemplatePath`/payments/schedules/${mapped.scheduleId}`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.call(requestOptions);
  }
}
