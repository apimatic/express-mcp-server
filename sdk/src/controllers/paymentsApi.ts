/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import {
  CancelPaymentRequest,
  cancelPaymentRequestSchema,
} from '../models/cancelPaymentRequest.js';
import {
  CancelPaymentResponse,
  cancelPaymentResponseSchema,
} from '../models/cancelPaymentResponse.js';
import {
  CapturePaymentRequest,
  capturePaymentRequestSchema,
} from '../models/capturePaymentRequest.js';
import {
  CapturePaymentResponse,
  capturePaymentResponseSchema,
} from '../models/capturePaymentResponse.js';
import {
  CreatePaymentRequest,
  createPaymentRequestSchema,
} from '../models/createPaymentRequest.js';
import {
  CreatePaymentResponse,
  createPaymentResponseSchema,
} from '../models/createPaymentResponse.js';
import {
  IncrementalAuthorizationRequest,
  incrementalAuthorizationRequestSchema,
} from '../models/incrementalAuthorizationRequest.js';
import {
  IncrementalAuthResponse,
  incrementalAuthResponseSchema,
} from '../models/incrementalAuthResponse.js';
import {
  ReferencedRefundResponse,
  referencedRefundResponseSchema,
} from '../models/referencedRefundResponse.js';
import {
  RefundRequestReferenced,
  refundRequestReferencedSchema,
} from '../models/refundRequestReferenced.js';
import {
  RefundRequestUnreferenced,
  refundRequestUnreferencedSchema,
} from '../models/refundRequestUnreferenced.js';
import {
  RetrieveCaptureResponse,
  retrieveCaptureResponseSchema,
} from '../models/retrieveCaptureResponse.js';
import {
  RetrievePaymentResponse,
  retrievePaymentResponseSchema,
} from '../models/retrievePaymentResponse.js';
import {
  RetrieveRefundResponse,
  retrieveRefundResponseSchema,
} from '../models/retrieveRefundResponse.js';
import {
  UnreferencedRefundResponse,
  unreferencedRefundResponseSchema,
} from '../models/unreferencedRefundResponse.js';
import { VoidRequest, voidRequestSchema } from '../models/voidRequest.js';
import { VoidResponse, voidResponseSchema } from '../models/voidResponse.js';
import { number, optional, string } from '../schema.js';
import { BaseApi } from './baseApi.js';
import { ProblemDetails400Error } from '../errors/problemDetails400Error.js';
import { ProblemDetails401Error } from '../errors/problemDetails401Error.js';
import { ProblemDetails404Error } from '../errors/problemDetails404Error.js';
import { ProblemDetails500Error } from '../errors/problemDetails500Error.js';

export class PaymentsApi extends BaseApi {
  /**
   * Create a new payment.
   *
   * The Channel and Payment method will determine the type of payment being created, as well as the
   * specific data requirements.
   *
   * Example payload:
   * ```
   * Headers:
   * Accept: application/json
   * Content-Type: application/json
   * WP-Idempotency-Key: <unique-guid>
   * WP-Api-Version: 1
   * WP-AccountId: <account-id>
   * Authorization: Worldpay license=xxxx
   *
   * Body:
   * {
   * "reference": "Memory265-13/08/1876",
   * "merchant": {
   * "id": "<acceptor-id>",
   * "terminalId": "<acceptor-id>"
   * },
   * "channel": {
   * "type": "ecom",
   * "paymentMethod": {
   * "type": "card",
   * "instrument": {
   * "type": "keyed/clear",
   * "cardData": {
   * "cardNumber": "<card-number>",
   * "expiryDate": {
   * "month": <month>,
   * "year": <year>
   * },
   * "cvc": "<cvc>"
   * }
   * }
   * }
   * },
   * "amount": {
   * "currency": "USD",
   * "value": 10
   * }
   * }
   * ```
   *
   *
   * @param wpIdempotencyKey   Caller-generated identifier in the form of a UUID/GUID.
   *                                                          This value is required and must be unique across unique
   *                                                          requests. A request that is intended to be a re-
   *                                                          submission or otherwise duplication of a previous request
   *                                                          (for example, in the event of a network interruption
   *                                                          during processing) should include the same key from the
   *                                                          previous (original) request, so that an idempotent
   *                                                          response can be returned.
   * @param wpApiVersion       Major version of the Payments API. This value is used
   *                                                          for routing purposes.
   * @param body               Request object for creating a new payment.
   * @param wpAccountId        Identifier for the partner, PayFac or merchant chain
   *                                                          account. This numeric value is for Express integrators
   *                                                          only.
   * @return Response from the API call
   */
  async createPayment(
    wpIdempotencyKey: string,
    wpApiVersion: number,
    body: CreatePaymentRequest,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CreatePaymentResponse>> {
    const req = this.createRequest('POST', '/payments');
    const mapped = req.prepareArgs({
      wpIdempotencyKey: [wpIdempotencyKey, string()],
      wpApiVersion: [wpApiVersion, number()],
      body: [body, createPaymentRequestSchema],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Idempotency-Key', mapped.wpIdempotencyKey);
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('Content-Type', 'application/json');
    req.header('WP-AccountId', mapped.wpAccountId);
    req.json(mapped.body);
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(createPaymentResponseSchema, requestOptions);
  }

  /**
   * Retrieve detailed information about the specified payment.
   *
   * @param wpApiVersion   Major version of the Payments API. This value is used for routing purposes.
   * @param id             Unique identifier for the payment.
   * @param merchantId     Identifier for the merchant associated with this resource.
   * @param wpAccountId    Identifier for the partner, PayFac or merchant chain account. This numeric value
   *                                 is for Express integrators only.
   * @return Response from the API call
   */
  async retrievePayment(
    wpApiVersion: number,
    id: string,
    merchantId: string,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RetrievePaymentResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      wpApiVersion: [wpApiVersion, number()],
      id: [id, string()],
      merchantId: [merchantId, string()],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('WP-AccountId', mapped.wpAccountId);
    req.query('merchantId', mapped.merchantId);
    req.appendTemplatePath`/payments/${mapped.id}`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(retrievePaymentResponseSchema, requestOptions);
  }

  /**
   * An authorization with an estimated amount occurs in specific industries where the merchant does not
   * know what the final bill will be at the point of interaction when the cardholder provides their card
   * details.
   *
   * Below is a list of some of the most common industries that use this functionality:
   *
   * <ul>
   * <li>Hotels</li>
   * <li>Vehicle and equipment rentals</li>
   * <li>Cruise Lines</li>
   * <li>Bars and Restaurants</li>
   * <li>Online grocery shopping</li>
   * </ul>
   *
   * The process can be broken down into three distinct phases:
   *
   * <ul>
   * <li>Initial authorization (at first point of contact with the card and cardholder), authorization
   * amount is marked as estimated.</li>
   * <li>Incremental authorizations (when additions are made to the potential bill), top-up required to
   * the previously done authorization.</li>
   * <li>Settling the transaction when the final amount is known.</li>
   * </ul>
   *
   * These phases are now required to be linked via a scheme-generated transaction ID (hereinafter
   * referred to as Scheme Reference Data) and settled for the final (known) amount.
   *
   * Visa allows what they term initial, estimated and incremental processing only in specific market
   * sectors. Mastercard allows incremental authorisation processing for all merchant types.
   *
   *
   *
   * @param wpIdempotencyKey   Caller-generated identifier in the form of a
   *                                                                     UUID/GUID.   This value is required and must
   *                                                                     be unique across unique requests. A request
   *                                                                     that is intended to be a re-submission or
   *                                                                     otherwise duplication of a previous request
   *                                                                     (for example, in the event of a network
   *                                                                     interruption during processing) should include
   *                                                                     the same key from the previous (original)
   *                                                                     request, so that an idempotent response can be
   *                                                                     returned.
   * @param wpApiVersion       Major version of the Payments API. This value
   *                                                                     is used for routing purposes.
   * @param id                 Unique identifier for the payment.
   * @param body               Request object for incremental authorization.
   * @param wpAccountId        Identifier for the partner, PayFac or
   *                                                                     merchant chain account. This numeric value is
   *                                                                     for Express integrators only.
   * @return Response from the API call
   */
  async incrementalAuth(
    wpIdempotencyKey: string,
    wpApiVersion: number,
    id: string,
    body: IncrementalAuthorizationRequest,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IncrementalAuthResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      wpIdempotencyKey: [wpIdempotencyKey, string()],
      wpApiVersion: [wpApiVersion, number()],
      id: [id, string()],
      body: [body, incrementalAuthorizationRequestSchema],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Idempotency-Key', mapped.wpIdempotencyKey);
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('Content-Type', 'application/json');
    req.header('WP-AccountId', mapped.wpAccountId);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/${mapped.id}/authorizations`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(incrementalAuthResponseSchema, requestOptions);
  }

  /**
   * Cancel the specified payment (either fully or partially).
   *
   * This operation provides a way to perform a full "reset" of the payment and will therefore completely
   * nullify all authorizations and referenced follow-on messages.
   *
   * Note that a partial cancellation (i.e., one where the amount requested is less than the original
   * authorization) will serve to decrement the final balance (viewable via the *amounts.balances.
   * cancellations.current* and *amounts.balances.total* fields when a payment retrieval is performed),
   * and the downstream issuer/network will be notified of the replacement amount.
   *
   * @param wpIdempotencyKey   Caller-generated identifier in the form of a UUID/GUID.
   *                                                          This value is required and must be unique across unique
   *                                                          requests. A request that is intended to be a re-
   *                                                          submission or otherwise duplication of a previous request
   *                                                          (for example, in the event of a network interruption
   *                                                          during processing) should include the same key from the
   *                                                          previous (original) request, so that an idempotent
   *                                                          response can be returned.
   * @param wpApiVersion       Major version of the Payments API. This value is used
   *                                                          for routing purposes.
   * @param id                 Unique identifier for the payment.
   * @param body               Request object for cancelling a payment.
   * @param wpAccountId        Identifier for the partner, PayFac or merchant chain
   *                                                          account. This numeric value is for Express integrators
   *                                                          only.
   * @return Response from the API call
   */
  async cancelPayment(
    wpIdempotencyKey: string,
    wpApiVersion: number,
    id: string,
    body: CancelPaymentRequest,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CancelPaymentResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      wpIdempotencyKey: [wpIdempotencyKey, string()],
      wpApiVersion: [wpApiVersion, number()],
      id: [id, string()],
      body: [body, cancelPaymentRequestSchema],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Idempotency-Key', mapped.wpIdempotencyKey);
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('Content-Type', 'application/json');
    req.header('WP-AccountId', mapped.wpAccountId);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/${mapped.id}/cancellations`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(cancelPaymentResponseSchema, requestOptions);
  }

  /**
   * Capture the specified payment (either fully or partially).
   *
   * @param wpIdempotencyKey   Caller-generated identifier in the form of a UUID/GUID.
   *                                                           This value is required and must be unique across
   *                                                           unique requests. A request that is intended to be a re-
   *                                                           submission or otherwise duplication of a previous
   *                                                           request (for example, in the event of a network
   *                                                           interruption during processing) should include the same
   *                                                           key from the previous (original) request, so that an
   *                                                           idempotent response can be returned.
   * @param wpApiVersion       Major version of the Payments API. This value is used
   *                                                           for routing purposes.
   * @param id                 Unique identifier for the payment.
   * @param body               Request object for capturing a payment.
   * @param wpAccountId        Identifier for the partner, PayFac or merchant chain
   *                                                           account. This numeric value is for Express integrators
   *                                                           only.
   * @return Response from the API call
   */
  async capturePayment(
    wpIdempotencyKey: string,
    wpApiVersion: number,
    id: string,
    body: CapturePaymentRequest,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CapturePaymentResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      wpIdempotencyKey: [wpIdempotencyKey, string()],
      wpApiVersion: [wpApiVersion, number()],
      id: [id, string()],
      body: [body, capturePaymentRequestSchema],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Idempotency-Key', mapped.wpIdempotencyKey);
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('Content-Type', 'application/json');
    req.header('WP-AccountId', mapped.wpAccountId);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/${mapped.id}/captures`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(capturePaymentResponseSchema, requestOptions);
  }

  /**
   * Retrieve detailed information about the specified capture.
   *
   * @param wpApiVersion   Major version of the Payments API. This value is used for routing purposes.
   * @param id             Unique identifier for the payment.
   * @param captureId      Unique identifier for the capture sub-resource.
   * @param merchantId     Identifier for the merchant associated with this resource.
   * @param wpAccountId    Identifier for the partner, PayFac or merchant chain account. This numeric value
   *                                 is for Express integrators only.
   * @return Response from the API call
   */
  async retrieveCapture(
    wpApiVersion: number,
    id: string,
    captureId: string,
    merchantId: string,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RetrieveCaptureResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      wpApiVersion: [wpApiVersion, number()],
      id: [id, string()],
      captureId: [captureId, string()],
      merchantId: [merchantId, string()],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('WP-AccountId', mapped.wpAccountId);
    req.query('merchantId', mapped.merchantId);
    req.appendTemplatePath`/payments/${mapped.id}/captures/${mapped.captureId}`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(retrieveCaptureResponseSchema, requestOptions);
  }

  /**
   * Issue a void against a capture (whether from an explicit capture or an auto-captured authorization).
   *
   * @param wpIdempotencyKey   Caller-generated identifier in the form of a UUID/GUID.   This
   *                                                 value is required and must be unique across unique requests. A
   *                                                 request that is intended to be a re-submission or otherwise
   *                                                 duplication of a previous request (for example, in the event of a
   *                                                 network interruption during processing) should include the same
   *                                                 key from the previous (original) request, so that an idempotent
   *                                                 response can be returned.
   * @param wpApiVersion       Major version of the Payments API. This value is used for routing
   *                                                 purposes.
   * @param id                 Unique identifier for the payment.
   * @param captureId          Unique identifier for the capture sub-resource.
   * @param body               Request object for voiding a capture.
   * @param wpAccountId        Identifier for the partner, PayFac or merchant chain account.
   *                                                 This numeric value is for Express integrators only.
   * @return Response from the API call
   */
  async voidCapture(
    wpIdempotencyKey: string,
    wpApiVersion: number,
    id: string,
    captureId: string,
    body: VoidRequest,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VoidResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      wpIdempotencyKey: [wpIdempotencyKey, string()],
      wpApiVersion: [wpApiVersion, number()],
      id: [id, string()],
      captureId: [captureId, string()],
      body: [body, voidRequestSchema],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Idempotency-Key', mapped.wpIdempotencyKey);
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('Content-Type', 'application/json');
    req.header('WP-AccountId', mapped.wpAccountId);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/${mapped.id}/captures/${mapped.captureId}/voids`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(voidResponseSchema, requestOptions);
  }

  /**
   * Issue a refund to a payment method by referencing a previous authorization.
   *
   * @param wpIdempotencyKey   Caller-generated identifier in the form of a
   *                                                             UUID/GUID.   This value is required and must be unique
   *                                                             across unique requests. A request that is intended to
   *                                                             be a re-submission or otherwise duplication of a
   *                                                             previous request (for example, in the event of a
   *                                                             network interruption during processing) should include
   *                                                             the same key from the previous (original) request, so
   *                                                             that an idempotent response can be returned.
   * @param wpApiVersion       Major version of the Payments API. This value is used
   *                                                             for routing purposes.
   * @param id                 Unique identifier for the payment.
   * @param body               Request object for issuing a referenced refund.
   * @param wpAccountId        Identifier for the partner, PayFac or merchant chain
   *                                                             account. This numeric value is for Express integrators
   *                                                             only.
   * @return Response from the API call
   */
  async referencedRefund(
    wpIdempotencyKey: string,
    wpApiVersion: number,
    id: string,
    body: RefundRequestReferenced,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ReferencedRefundResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      wpIdempotencyKey: [wpIdempotencyKey, string()],
      wpApiVersion: [wpApiVersion, number()],
      id: [id, string()],
      body: [body, refundRequestReferencedSchema],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Idempotency-Key', mapped.wpIdempotencyKey);
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('Content-Type', 'application/json');
    req.header('WP-AccountId', mapped.wpAccountId);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/${mapped.id}/refunds`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(referencedRefundResponseSchema, requestOptions);
  }

  /**
   * Retrieve detailed information about the specified refund.
   *
   * @param wpApiVersion   Major version of the Payments API. This value is used for routing purposes.
   * @param id             Unique identifier for the payment.
   * @param refundId       Identifier for the refund.
   * @param merchantId     Identifier for the merchant associated with this resource.
   * @param wpAccountId    Identifier for the partner, PayFac or merchant chain account. This numeric value
   *                                 is for Express integrators only.
   * @return Response from the API call
   */
  async retrieveReferencedRefund(
    wpApiVersion: number,
    id: string,
    refundId: string,
    merchantId: string,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RetrieveRefundResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      wpApiVersion: [wpApiVersion, number()],
      id: [id, string()],
      refundId: [refundId, string()],
      merchantId: [merchantId, string()],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('WP-AccountId', mapped.wpAccountId);
    req.query('merchantId', mapped.merchantId);
    req.appendTemplatePath`/payments/${mapped.id}/refunds/${mapped.refundId}`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(retrieveRefundResponseSchema, requestOptions);
  }

  /**
   * Issue a void against a referenced refund.
   *
   * @param wpIdempotencyKey   Caller-generated identifier in the form of a UUID/GUID.   This
   *                                                 value is required and must be unique across unique requests. A
   *                                                 request that is intended to be a re-submission or otherwise
   *                                                 duplication of a previous request (for example, in the event of a
   *                                                 network interruption during processing) should include the same
   *                                                 key from the previous (original) request, so that an idempotent
   *                                                 response can be returned.
   * @param wpApiVersion       Major version of the Payments API. This value is used for routing
   *                                                 purposes.
   * @param id                 Unique identifier for the payment.
   * @param refundId           Identifier for the refund.
   * @param body               Request object for voiding a referenced refund.
   * @param wpAccountId        Identifier for the partner, PayFac or merchant chain account.
   *                                                 This numeric value is for Express integrators only.
   * @return Response from the API call
   */
  async voidReferencedRefund(
    wpIdempotencyKey: string,
    wpApiVersion: number,
    id: string,
    refundId: string,
    body: VoidRequest,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VoidResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      wpIdempotencyKey: [wpIdempotencyKey, string()],
      wpApiVersion: [wpApiVersion, number()],
      id: [id, string()],
      refundId: [refundId, string()],
      body: [body, voidRequestSchema],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Idempotency-Key', mapped.wpIdempotencyKey);
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('Content-Type', 'application/json');
    req.header('WP-AccountId', mapped.wpAccountId);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/${mapped.id}/refunds/${mapped.refundId}/voids`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(voidResponseSchema, requestOptions);
  }

  /**
   * Issue a refund to payment method without referencing a previous authorization.
   *
   * @param wpIdempotencyKey   Caller-generated identifier in the form of a
   *                                                               UUID/GUID.   This value is required and must be
   *                                                               unique across unique requests. A request that is
   *                                                               intended to be a re-submission or otherwise
   *                                                               duplication of a previous request (for example, in
   *                                                               the event of a network interruption during
   *                                                               processing) should include the same key from the
   *                                                               previous (original) request, so that an idempotent
   *                                                               response can be returned.
   * @param wpApiVersion       Major version of the Payments API. This value is
   *                                                               used for routing purposes.
   * @param body               Request object for issuing an unreferenced refund.
   * @param wpAccountId        Identifier for the partner, PayFac or merchant
   *                                                               chain account. This numeric value is for Express
   *                                                               integrators only.
   * @return Response from the API call
   */
  async unreferencedRefund(
    wpIdempotencyKey: string,
    wpApiVersion: number,
    body: RefundRequestUnreferenced,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UnreferencedRefundResponse>> {
    const req = this.createRequest('POST', '/payments/refunds');
    const mapped = req.prepareArgs({
      wpIdempotencyKey: [wpIdempotencyKey, string()],
      wpApiVersion: [wpApiVersion, number()],
      body: [body, refundRequestUnreferencedSchema],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Idempotency-Key', mapped.wpIdempotencyKey);
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('Content-Type', 'application/json');
    req.header('WP-AccountId', mapped.wpAccountId);
    req.json(mapped.body);
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(unreferencedRefundResponseSchema, requestOptions);
  }

  /**
   * Issue a void against a unreferenced refund.
   *
   * @param wpIdempotencyKey   Caller-generated identifier in the form of a UUID/GUID.   This
   *                                                 value is required and must be unique across unique requests. A
   *                                                 request that is intended to be a re-submission or otherwise
   *                                                 duplication of a previous request (for example, in the event of a
   *                                                 network interruption during processing) should include the same
   *                                                 key from the previous (original) request, so that an idempotent
   *                                                 response can be returned.
   * @param wpApiVersion       Major version of the Payments API. This value is used for routing
   *                                                 purposes.
   * @param refundId           Identifier for the refund.
   * @param body               Request object for voiding an unreferenced refund.
   * @param wpAccountId        Identifier for the partner, PayFac or merchant chain account.
   *                                                 This numeric value is for Express integrators only.
   * @return Response from the API call
   */
  async voidUnreferencedRefund(
    wpIdempotencyKey: string,
    wpApiVersion: number,
    refundId: string,
    body: VoidRequest,
    wpAccountId?: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<VoidResponse>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({
      wpIdempotencyKey: [wpIdempotencyKey, string()],
      wpApiVersion: [wpApiVersion, number()],
      refundId: [refundId, string()],
      body: [body, voidRequestSchema],
      wpAccountId: [wpAccountId, optional(number())],
    });
    req.header('WP-Idempotency-Key', mapped.wpIdempotencyKey);
    req.header('WP-Api-Version', mapped.wpApiVersion);
    req.header('Content-Type', 'application/json');
    req.header('WP-AccountId', mapped.wpAccountId);
    req.json(mapped.body);
    req.appendTemplatePath`/payments/refunds/${mapped.refundId}/voids`;
    req.throwOn(400, ProblemDetails400Error, 'Bad Request');
    req.throwOn(
      401,
      ProblemDetails401Error,
      'Client is not authorized due to missing or invalid Authorization header.'
    );
    req.throwOn(404, ProblemDetails404Error, 'Resource Not Found');
    req.throwOn(
      415,
      ProblemDetails400Error,
      'Invalid content-type HTTP header'
    );
    req.throwOn(
      500,
      ProblemDetails500Error,
      'An error occurred processing the request on our side.'
    );
    req.authenticate([{ apiKeyAuth: true }]);
    return req.callAsJson(voidResponseSchema, requestOptions);
  }
}
