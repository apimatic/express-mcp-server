/**
 * Express Payments APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { CoreClient } from '@apimatic/metadata-interfaces';
import { Client } from '../client.js';
import { createConfigurationFromEnvironment } from '../configuration.js';
import { ClientManagementApi } from '../controllers/clientManagementApi.js';
import { PaymentsApi } from '../controllers/paymentsApi.js';
import { ScheduledPaymentsManagementApi } from '../controllers/scheduledPaymentsManagementApi.js';
import { EndpointMetadata, RequestSchema } from './endpointMetadata.js';
import * as clientManagementApiSchemas from './endpointSchemas/clientManagementApiSchemas.js';
import * as paymentsApiSchemas from './endpointSchemas/paymentsApiSchemas.js';
import * as scheduledPaymentsManagementApiSchemas from './endpointSchemas/scheduledPaymentsManagementApiSchemas.js';

export const endpoints = {
  'Payments-createPayment': new EndpointMetadata(
    'createPayment',
    'Payments',
    new RequestSchema(paymentsApiSchemas.createPaymentMetadataRequestSchema),
    (client, mapped) =>
      new PaymentsApi(client).createPayment(
        mapped.wpIdempotencyKey,
        mapped.wpApiVersion,
        mapped.body,
        mapped.wpAccountId
      ),
    'Create a new payment.\\n\\nThe Channel and Payment method will determine the type of payment being created, as well as the specific data requirements.\\n\\nExample payload:\\n```\\nHeaders:\\n  Accept: application/json\\n  Content-Type: application/json\\n  WP-Idempotency-Key: <unique-guid>\\n  WP-Api-Version: 1\\n  WP-AccountId: <account-id>\\n  Authorization: Worldpay license=xxxx\\n\\nBody:\\n{\\n  \\"reference\\": \\"Memory265-13/08/1876\\",\\n  \\"merchant\\": {\\n    \\"id\\": \\"<acceptor-id>\\",\\n    \\"terminalId\\": \\"<acceptor-id>\\"\\n  },\\n  \\"channel\\": {\\n    \\"type\\": \\"ecom\\",\\n    \\"paymentMethod\\": {\\n      \\"type\\": \\"card\\",\\n      \\"instrument\\": {\\n        \\"type\\": \\"keyed/clear\\",\\n        \\"cardData\\": {\\n          \\"cardNumber\\": \\"<card-number>\\",\\n          \\"expiryDate\\": {\\n            \\"month\\": <month>,\\n            \\"year\\": <year>\\n          },\\n          \\"cvc\\": \\"<cvc>\\"\\n        }\\n      }\\n    }\\n  },\\n  \\"amount\\": {\\n    \\"currency\\": \\"USD\\",\\n    \\"value\\": 10\\n  }\\n}\\n```\\n'
  ),
  'Payments-retrievePayment': new EndpointMetadata(
    'retrievePayment',
    'Payments',
    new RequestSchema(paymentsApiSchemas.retrievePaymentMetadataRequestSchema),
    (client, mapped) =>
      new PaymentsApi(client).retrievePayment(
        mapped.wpApiVersion,
        mapped.id,
        mapped.merchantId,
        mapped.wpAccountId
      ),
    'Retrieve detailed information about the specified payment.'
  ),
  'Payments-incrementalAuth': new EndpointMetadata(
    'incrementalAuth',
    'Payments',
    new RequestSchema(paymentsApiSchemas.incrementalAuthMetadataRequestSchema),
    (client, mapped) =>
      new PaymentsApi(client).incrementalAuth(
        mapped.wpIdempotencyKey,
        mapped.wpApiVersion,
        mapped.id,
        mapped.body,
        mapped.wpAccountId
      ),
    'An authorization with an estimated amount occurs in specific industries where the merchant does not know what the final bill will be at the point of interaction when the cardholder provides their card details. \\n\\nBelow is a list of some of the most common industries that use this functionality:\\n\\n<ul>\\n  <li>Hotels</li>\\n  <li>Vehicle and equipment rentals</li>\\n  <li>Cruise Lines</li>\\n  <li>Bars and Restaurants</li>\\n  <li>Online grocery shopping</li>\\n</ul>\\n    \\nThe process can be broken down into three distinct phases:\\n\\n<ul>\\n  <li>Initial authorization (at first point of contact with the card and cardholder), authorization amount is marked as estimated.</li>  \\n  <li>Incremental authorizations (when additions are made to the potential bill), top-up required to the previously done authorization.</li> \\n  <li>Settling the transaction when the final amount is known.</li> \\n</ul>\\n\\nThese phases are now required to be linked via a scheme-generated transaction ID (hereinafter referred to as Scheme Reference Data) and settled for the final (known) amount. \\n\\nVisa allows what they term initial, estimated and incremental processing only in specific market sectors. Mastercard allows incremental authorisation processing for all merchant types.\\n\\n'
  ),
  'Payments-cancelPayment': new EndpointMetadata(
    'cancelPayment',
    'Payments',
    new RequestSchema(paymentsApiSchemas.cancelPaymentMetadataRequestSchema),
    (client, mapped) =>
      new PaymentsApi(client).cancelPayment(
        mapped.wpIdempotencyKey,
        mapped.wpApiVersion,
        mapped.id,
        mapped.body,
        mapped.wpAccountId
      ),
    'Cancel the specified payment (either fully or partially).\\n\\nThis operation provides a way to perform a full \\"reset\\" of the payment and will therefore completely nullify all authorizations and referenced follow-on messages.\\n\\nNote that a partial cancellation (i.e., one where the amount requested is less than the original authorization) will serve to decrement the final balance (viewable via the *amounts.balances.cancellations.current* and *amounts.balances.total* fields when a payment retrieval is performed), and the downstream issuer/network will be notified of the replacement amount.'
  ),
  'Payments-capturePayment': new EndpointMetadata(
    'capturePayment',
    'Payments',
    new RequestSchema(paymentsApiSchemas.capturePaymentMetadataRequestSchema),
    (client, mapped) =>
      new PaymentsApi(client).capturePayment(
        mapped.wpIdempotencyKey,
        mapped.wpApiVersion,
        mapped.id,
        mapped.body,
        mapped.wpAccountId
      ),
    'Capture the specified payment (either fully or partially).'
  ),
  'Payments-retrieveCapture': new EndpointMetadata(
    'retrieveCapture',
    'Payments',
    new RequestSchema(paymentsApiSchemas.retrieveCaptureMetadataRequestSchema),
    (client, mapped) =>
      new PaymentsApi(client).retrieveCapture(
        mapped.wpApiVersion,
        mapped.id,
        mapped.captureId,
        mapped.merchantId,
        mapped.wpAccountId
      ),
    'Retrieve detailed information about the specified capture.'
  ),
  'Payments-voidCapture': new EndpointMetadata(
    'voidCapture',
    'Payments',
    new RequestSchema(paymentsApiSchemas.voidCaptureMetadataRequestSchema),
    (client, mapped) =>
      new PaymentsApi(client).voidCapture(
        mapped.wpIdempotencyKey,
        mapped.wpApiVersion,
        mapped.id,
        mapped.captureId,
        mapped.body,
        mapped.wpAccountId
      ),
    'Issue a void against a capture (whether from an explicit capture or an auto-captured authorization).'
  ),
  'Payments-referencedRefund': new EndpointMetadata(
    'referencedRefund',
    'Payments',
    new RequestSchema(paymentsApiSchemas.referencedRefundMetadataRequestSchema),
    (client, mapped) =>
      new PaymentsApi(client).referencedRefund(
        mapped.wpIdempotencyKey,
        mapped.wpApiVersion,
        mapped.id,
        mapped.body,
        mapped.wpAccountId
      ),
    'Issue a refund to a payment method by referencing a previous authorization.'
  ),
  'Payments-retrieveReferencedRefund': new EndpointMetadata(
    'retrieveReferencedRefund',
    'Payments',
    new RequestSchema(
      paymentsApiSchemas.retrieveReferencedRefundMetadataRequestSchema
    ),
    (client, mapped) =>
      new PaymentsApi(client).retrieveReferencedRefund(
        mapped.wpApiVersion,
        mapped.id,
        mapped.refundId,
        mapped.merchantId,
        mapped.wpAccountId
      ),
    'Retrieve detailed information about the specified refund.'
  ),
  'Payments-voidReferencedRefund': new EndpointMetadata(
    'voidReferencedRefund',
    'Payments',
    new RequestSchema(
      paymentsApiSchemas.voidReferencedRefundMetadataRequestSchema
    ),
    (client, mapped) =>
      new PaymentsApi(client).voidReferencedRefund(
        mapped.wpIdempotencyKey,
        mapped.wpApiVersion,
        mapped.id,
        mapped.refundId,
        mapped.body,
        mapped.wpAccountId
      ),
    'Issue a void against a referenced refund.'
  ),
  'Payments-unreferencedRefund': new EndpointMetadata(
    'unreferencedRefund',
    'Payments',
    new RequestSchema(
      paymentsApiSchemas.unreferencedRefundMetadataRequestSchema
    ),
    (client, mapped) =>
      new PaymentsApi(client).unreferencedRefund(
        mapped.wpIdempotencyKey,
        mapped.wpApiVersion,
        mapped.body,
        mapped.wpAccountId
      ),
    'Issue a refund to payment method without referencing a previous authorization.'
  ),
  'Payments-voidUnreferencedRefund': new EndpointMetadata(
    'voidUnreferencedRefund',
    'Payments',
    new RequestSchema(
      paymentsApiSchemas.voidUnreferencedRefundMetadataRequestSchema
    ),
    (client, mapped) =>
      new PaymentsApi(client).voidUnreferencedRefund(
        mapped.wpIdempotencyKey,
        mapped.wpApiVersion,
        mapped.refundId,
        mapped.body,
        mapped.wpAccountId
      ),
    'Issue a void against a unreferenced refund.'
  ),
  'Scheduled payments management-querySchedule': new EndpointMetadata(
    'querySchedule',
    'Scheduled payments management',
    new RequestSchema(
      scheduledPaymentsManagementApiSchemas.queryScheduleMetadataRequestSchema
    ),
    (client, mapped) =>
      new ScheduledPaymentsManagementApi(client).querySchedule(
        mapped.wpApiVersion,
        mapped.scheduleId,
        mapped.merchantId,
        mapped.wpAccountId
      ),
    'Query for information on a specific payment schedule.'
  ),
  'Scheduled payments management-updateSchedule': new EndpointMetadata(
    'updateSchedule',
    'Scheduled payments management',
    new RequestSchema(
      scheduledPaymentsManagementApiSchemas.updateScheduleMetadataRequestSchema
    ),
    (client, mapped) =>
      new ScheduledPaymentsManagementApi(client).updateSchedule(
        mapped.wpApiVersion,
        mapped.scheduleId,
        mapped.body,
        mapped.wpAccountId
      ),
    'Update an existing recurring payment schedule with new values.'
  ),
  'Scheduled payments management-deleteSchedule': new EndpointMetadata(
    'deleteSchedule',
    'Scheduled payments management',
    new RequestSchema(
      scheduledPaymentsManagementApiSchemas.deleteScheduleMetadataRequestSchema
    ),
    (client, mapped) =>
      new ScheduledPaymentsManagementApi(client).deleteSchedule(
        mapped.wpApiVersion,
        mapped.scheduleId,
        mapped.merchantId,
        mapped.wpAccountId
      ),
    'Delete an existing recurring payment schedule with new values.'
  ),
  'Client Management-getPcrt': new EndpointMetadata(
    'getPcrt',
    'Client Management',
    new RequestSchema(clientManagementApiSchemas.getPcrtMetadataRequestSchema),
    (client, mapped) =>
      new ClientManagementApi(client).getPcrt(
        mapped.wpApiVersion,
        mapped.body,
        mapped.wpAccountId
      ),
    'Returns a SoftPOS proximity reader token with relevant entitlements. \\n'
  ),
} as const;

export function clientFactory(): CoreClient {
  return new Client(createConfigurationFromEnvironment()) as object as CoreClient;
}